#include <AsyncUDP.h>
#include <SoftwareSerial.h>
#include <WiFi.h>
#include <stdlib.h>
#include <U8g2lib.h>
#include <Wire.h>
//#include <ESPAsyncUDP.h>
#include <cstring>
#include <SPI.h>


#define MAX_CROSSROADS_NUM 3
#define MAX_STATION_NUM    3
#define AZI_SHIFT 30 //方位角判定偏移值，单位度

//任务句柄
TaskHandle_t taskBeidou;
TaskHandle_t taskMain;

//初始化软串口对象
//SoftwareSerial Serial2(18, 19);   // 第一个参数为RX，第二个为TX。这里单片机仅用到接收，RX与北斗模块的输出接口连接
//U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/ 14, /* data=*/ 13, /* CS=*/ 15);
U8G2_ST7567_JLX12864_F_4W_SW_SPI u8g2(U8G2_R2,/*CLK*/25,/*DATA*/26,/*CS*/27,/*RS*/32,/*RST*/33);
AsyncUDP udp;

char RXPacket[13];
unsigned int localUdpPort = 4210;
char msgStr[30] = {0};
char lonStr[11] = {0}; // 经度字符串 116.123456
char latStr[10] = {0}; // 纬度字符串 40.654321
char AzimuthStr[3] = {0}; //方位角字符串
double currentLon, currentLat;
int currentAzi;
//int inCrossing = 0, inStation = 0;
int mode = 0;          //0-->广告，1-->路口，2-->报站；
int currentCrossing = -1, currentStation = -1;

int rollx = 0;    //滚动位置

//存储路口信息结构体
struct crossroad
{
  const char* SSID;   //路口AP的SSID
  const char* psd;    //路口AP的密码
  double FlongitudeE; //路口极东经度
  double FlongitudeW; //路口极西经度
  double FlatitudeS;  //路口极南纬度
  double FlatitudeN;  //路口极北纬度
  double NlongitudeE; //显示范围东起始经线
  double NlongitudeW; //显示范围西起始经线
  double NlatitudeS;  //显示范围南起始纬线
  double NlatitudeN;  //显示范围北起始纬线
  int dir0Azimuth;    //方向0的方位角(取小于180一边)
  int dir1Azimuth;    //方向1的方位角(取小于180一边)
}crossing[MAX_CROSSROADS_NUM] = {
  {
    /*SSID = */"TLECROSSROAD0",
    /*pad = */"12345678",
    /*FlongitudeE = */123.114514,
    /*FlongitudeW = */123.191981,
    /*latitudeS = */41.114514,
    /*FlatitudeN = */41.191981,
    /*NlongitudeE = */122.114514,
    /*NlongitudeW = */122.191981,
    /*NlatitudeS = */41.114514,
    /*NlatitudeN = */41.191981,
    /*dir0Azimuth = */90,
    /*dir0Azimuth = */180
  },
  {
    /*SSID = */"TLECROSSROAD1",
    /*pad = */"12345678",
    /*FlongitudeE = */123.686868,
    /*FlongitudeW = */123.868686,
    /*latitudeS = */41.686868,
    /*FlatitudeN = */41.868686,
    /*NlongitudeE = */122.686868,
    /*NlongitudeW = */122.868686,
    /*NlatitudeS = */41.686868,
    /*NlatitudeN = */41.868686,
    /*dir0Azimuth = */90,
    /*dir0Azimuth = */180
  },
  {
    /*SSID = */"TLECROSSROAD2",
    /*pad = */"12345678",
    /*FlongitudeE = */122.114514,
    /*FlongitudeW = */122.191981,
    /*latitudeS = */40.114514,
    /*FlatitudeN = */40.191981,
    /*NlongitudeE = */121.114514,
    /*NlongitudeW = */121.191981,
    /*NlatitudeS = */40.114514,
    /*NlatitudeN = */40.191981,
    /*dir0Azimuth = */90,
    /*dir0Azimuth = */180
  }
};


//存储报站信息结构体
struct station
{
  const char* name;   //车站名
  double longitudeE;  //极东经线
  double longitudeW;  //极西经线
  double latitudeS;   //极南纬线
  double latitudeN;   //极北纬线
}sta[MAX_STATION_NUM] = {
  {
    /*name =*/"0.Shiyan High School",
    /*longitudeE =*/114.514191,
    /*longitudeW =*/191.981011,
    /*latitudeS =*/41.191981,
    /*latitudeN =*/41.145141
  },
    {
    /*name =*/"1.Vanguard Supermarket",
    /*longitudeE =*/114.514191,
    /*longitudeW =*/191.981011,
    /*latitudeS =*/41.191981,
    /*latitudeN =*/41.145141
  },
    {
    /*name =*/"2.Shenyang Railway Station",
    /*longitudeE =*/114.514191,
    /*longitudeW =*/191.981011,
    /*latitudeS =*/41.191981,
    /*latitudeN =*/41.145141
  }
};

void bdStr2Double()
{
  currentLon = strtod(lonStr, NULL);
  currentLat = strtod(latStr, NULL);
  currentAzi = atoi(AzimuthStr);
}

int searchCrossroads()
{
  for(int i = 0; i < MAX_CROSSROADS_NUM; i++)
  {
    if(currentLon <= crossing[i].FlongitudeE)
    {
      if(currentLon >= crossing[i].FlongitudeW)
      {
        if(currentLat <= crossing[i].FlatitudeN)
        {
          if(currentLat >= crossing[i].FlatitudeS)
          {
            if(mode != 1)
            {
              displayCrossIcon(0);
              displayStaIcon(0);
            }
            mode = 1;
            currentCrossing = i;
            displayCrossIcon(1);
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

int searchStation()
{
  for(int i = 0; i < MAX_CROSSROADS_NUM; i++)
  {
    if(currentLon <= sta[i].longitudeE)
    {
      if(currentLon >= sta[i].longitudeW)
      {
        if(currentLat <= sta[i].latitudeN)
        {
          if(currentLat >= sta[i].latitudeS)
          {
            if(mode != 2)
            {
              displayCrossIcon(0);
              displayStaIcon(0);
              rollx = 0;
            }
            mode = 2;
            currentStation = i;
            displayStaIcon(1);
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

/**
  @brief 处理北斗数据任务代码
*/
void taskBeidouCode(void * parameter)
{
  for(;;)
  {
    while (Serial2.available()) 
    { // 软串监听，当收到数据时，读取数值并处理

      char recvMsg[30];
      size_t len = Serial2.readBytesUntil('\n', recvMsg, 30);
      memset(msgStr, 0, 30);
      strncpy(msgStr, recvMsg, len-1); // 复制除标识符外的字符串，后续会使用strsep进行破坏性解析

      char *q = msgStr;
      char *p;

      p = strsep(&q, ",");    // 截取到“,”前的子字符串到p
      if (NULL == p) continue;
      if (p && 0 != strcmp(p, "0.0")) 
      {
        // 获取经度成功，保存经度数据
        strcpy(lonStr, p);
        p = strsep(&q, ",");
        if (NULL == p) continue;
        if (p && 0 != strcmp(p, "0.0")) 
        {
          // 获取纬度数据成功，保存纬度数据
          strcpy(latStr, p);
        }
      }
      for(int i = 0; i < 6; i++)
      {
        p = strsep(&q, ",");
      }
      if (NULL == p) continue;
      strcpy(AzimuthStr, p);
    }
    bdStr2Double();
    if(!searchCrossroads() && !searchStation())
    {
      if(mode == 1)
      {
        displayCrossIcon(0);
        if(WiFi.status() == WL_CONNECTED)
        {
          WiFi.disconnect();
        }
        displayWiFiIcon(0);
      }
      if(mode == 2)
      {
        displayStaIcon(0);
      }
      mode = 0;
    }
  }
}

//ssy的广告（夹带私货）
const unsigned char ads[] U8X8_PROGMEM = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xFF,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7E,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x80,0x3F,0x7C,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xE0,0x7F,0x3E,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xF8,0xFF,0x3F,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x1F,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x80,0xFF,0xFF,0x0F,0x00,0xF0,0x0F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0x0F,0x00,0xE0,0x3F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xF8,0xFF,0xFF,0x07,0xFC,0xC3,0xFF,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xFE,0xFF,0xFF,0x83,0x1F,0xC3,0xFF,0x03,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xF1,0x01,0xE0,0xFF,0x0F,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xC0,0xFF,0xFF,0xFF,0x78,0x00,0xF8,0xFF,0x3F,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xF0,0xFF,0xFF,0x7F,0x3C,0x00,0xFC,0xFF,0xFF,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x7C,0xFE,0xFF,0x3F,0x1F,0x00,0xFE,0xFF,0xFF,0x03,0x00,0x00,0x00,
  0x00,0x00,0x00,0xFF,0xF8,0xFF,0x0F,0x1F,0x80,0xFF,0xFF,0xFF,0x0F,0x00,0x00,0x00,
  0x00,0x00,0xC0,0xFF,0x81,0xFF,0x81,0x3F,0xC0,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,
  0x00,0x00,0xF0,0xFF,0x03,0x00,0x80,0x7F,0xF0,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x00,
  0x00,0x00,0xFC,0xFF,0x07,0x00,0x00,0xFF,0xF7,0xFF,0xFF,0xFF,0xFF,0x07,0x00,0x00,
  0x00,0x00,0xFE,0xFF,0x0F,0x00,0x00,0xFF,0xC1,0xFF,0xFF,0xFC,0xFF,0x0F,0x00,0x00,
  0x00,0x80,0xFF,0xFF,0x1F,0x00,0x00,0x3C,0x80,0xFF,0x07,0xFF,0xFF,0x03,0x00,0x00,
  0x00,0xE0,0xFF,0xFF,0x3F,0x00,0x00,0x06,0x00,0x3F,0xC0,0xFF,0xFF,0x00,0x00,0x00,
  0x00,0xC0,0xFF,0xFF,0xFF,0x00,0xFE,0x1F,0x00,0x01,0xE0,0xFF,0x7F,0x00,0x00,0x00,
  0x00,0x00,0xFF,0xFF,0xFF,0x01,0xF0,0x7F,0xC0,0x00,0xF0,0xFF,0x1F,0x00,0x00,0x00,
  0x00,0x00,0xFE,0x3F,0xFF,0x03,0x00,0x00,0xFF,0x00,0xF8,0xFF,0x07,0x00,0x00,0x00,
  0x00,0x00,0xF8,0x3F,0xFE,0x0F,0x00,0x00,0xFF,0x00,0xF8,0xFF,0x01,0x00,0x00,0x00,
  0x00,0x00,0xE0,0x3F,0xFE,0x1F,0x00,0x80,0xFF,0x00,0xFC,0xFF,0x00,0x00,0x00,0x00,
  0x00,0x00,0x80,0x7F,0xFC,0x7F,0x00,0xC0,0x7F,0x00,0xFE,0x3F,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xFC,0xF1,0xFF,0x00,0xF0,0x3F,0x00,0xFE,0x0F,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xF0,0x07,0xFF,0x03,0xFF,0x1F,0x00,0xFF,0x03,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xC0,0x1F,0x00,0xF0,0xFF,0x0F,0x00,0xFF,0x01,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xFF,0x00,0xC0,0xFF,0x03,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xFC,0x0F,0x00,0xFF,0x00,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0xF0,0xFF,0x03,0x10,0x00,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,
  0x00,0x80,0x01,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x01,0x26,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x03,0x22,0x00,0xFC,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0xF0,0x3F,0xFE,0x03,0xF0,0xFF,0xB2,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x10,0x00,0x23,0x00,0xC0,0xFF,0x1A,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x10,0x80,0x20,0x00,0x00,0xFF,0x61,0xFE,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x10,0xC0,0xFF,0x1F,0x00,0xF8,0xFD,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x10,0x00,0x00,0x00,0x00,0xE0,0xFF,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x10,0x00,0xFE,0x03,0x00,0x80,0xFF,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x18,0x00,0x02,0x02,0x00,0x00,0xFE,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x08,0x00,0x02,0x02,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x0C,0x00,0x02,0x02,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x06,0x00,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
/* (128 X 64 )*/
};

void displayAd()
{
  u8g2.drawXBMP(0, 0, 128, 64, ads);
  u8g2.sendBuffer();
}

void displayWiFiIcon(int status)
{
  switch (status) 
  {
    case 0:
    {
      u8g2.setDrawColor(0);
      u8g2.drawBox(111, 0, 16, 16);
      u8g2.setDrawColor(1);
      u8g2.sendBuffer();
      break;
    }
    case 1:
    {
      u8g2.setFont(u8g2_font_open_iconic_www_2x_t);
      u8g2.drawGlyph(111, 0, 81);
      u8g2.sendBuffer();
      u8g2.setFont(u8g2_font_unifont_t_symbols);
      break;
    }
  }
}

void displayCrossIcon(int status)
{
  switch (status) 
  {
    case 0:
    {
      u8g2.setDrawColor(0);
      u8g2.drawBox(111, 31, 16, 16);
      u8g2.setDrawColor(1);
      u8g2.sendBuffer();
      break;
    }
    case 1:
    {
      u8g2.setFont(u8g2_font_open_iconic_www_2x_t);
      u8g2.drawGlyph(111, 31, 70);
      u8g2.sendBuffer();
      u8g2.setFont(u8g2_font_unifont_t_symbols);
      break;
    }
  }
}

void displayStaIcon(int status)
{
  switch (status) 
  {
    case 0:
    {
      u8g2.setDrawColor(0);
      u8g2.drawBox(111, 15, 16, 16);
      u8g2.setDrawColor(1);
      u8g2.sendBuffer();
      break;
    }
    case 1:
    {
      u8g2.setFont(u8g2_font_open_iconic_www_2x_t);
      u8g2.drawGlyph(111, 15, 71);
      u8g2.sendBuffer();
      u8g2.setFont(u8g2_font_unifont_t_symbols);
      break;
    }
  }
}

void displayTransIcon(int status)
{
  switch (status) 
  {
    case 0:
    {
      u8g2.setDrawColor(0);
      u8g2.drawBox(111, 47, 16, 16);
      u8g2.setDrawColor(1);
      u8g2.sendBuffer();
      break;
    }
    case 1:
    {
      u8g2.setFont(u8g2_font_open_iconic_www_2x_t);
      u8g2.drawGlyph(111, 47, 83);
      u8g2.sendBuffer();
      u8g2.setFont(u8g2_font_unifont_t_symbols);
      break;
    }
  }
}

void onPacketCallBack(AsyncUDPPacket packet)  //收包后的回调函数；
{
  memcpy(RXPacket, packet.data(), sizeof(RXPacket));
  displayTransIcon(1);
}

int dir = 0;
void judgeDir()
{
  int unsignedAzi = 0;
  int dir0min = 0, dir0max = 0, dir1min = 0, dir1max = 0;
  /*
  if(currentAzi > 180) 
  {
    unsignedAzi = currentAzi - 180;
  }
  else
  {
    unsignedAzi = currentAzi;
  }
  */
  unsignedAzi = currentAzi % 180;   //转为180以内，避免套圈同时减少判断的区间数
  dir0min = crossing[currentCrossing].dir0Azimuth - AZI_SHIFT;
  dir0max = crossing[currentCrossing].dir0Azimuth + AZI_SHIFT;
  dir1min = crossing[currentCrossing].dir1Azimuth - AZI_SHIFT;
  dir1max = crossing[currentCrossing].dir1Azimuth + AZI_SHIFT;
  if((unsignedAzi >= dir0min && unsignedAzi <= dir0max) || (unsignedAzi >= dir0min + 180 && unsignedAzi <= dir0max + 180))
  {
    dir = 0;
    return;
  }
  if((unsignedAzi >= dir1min && unsignedAzi <= dir1max) || (unsignedAzi >= dir1min + 180 && unsignedAzi <= dir1max + 180))
  {
    dir = 1;
    return;
  }
}

void connectWiFi()
{
  WiFi.begin(crossing[currentCrossing].SSID, crossing[currentCrossing].psd);
  while(WiFi.status() != WL_CONNECTED)
  {
    delay(100);
  }
  displayWiFiIcon(1);
  while(!udp.listen(localUdpPort))
  {
  }
  udp.onPacket(onPacketCallBack);
}

//诸多显示函数，依托于旧通信协议，找时间改

void LeftGreen2Buffer()
{
  u8g2.drawTriangle(30, 16, 42, 4, 42, 28);
  u8g2.drawBox(42, 10, 18, 12);
}

void LeftRed2Buffer()
{
  u8g2.drawTriangle(30, 16, 42, 4, 42, 28);
  u8g2.drawBox(42, 10, 18, 12);
  u8g2.drawLine(30, 4, 60, 28);
  u8g2.drawLine(30, 5, 59, 28);
  u8g2.drawLine(31, 4, 60, 27);  
}

void LeftYellow2Buffer()
{
  //Serial.println("Start draw Lyellow");  ///////////////////////////////////
  u8g2.drawLine(30, 16, 42, 4);
  u8g2.drawLine(42, 4, 42, 10);
  u8g2.drawLine(42, 10, 60, 10);
  u8g2.drawLine(60, 10, 60, 22);
  u8g2.drawLine(60, 22, 42, 22);
  u8g2.drawLine(42, 22, 42, 28);
  u8g2.drawLine(42, 28, 30, 16);
  //Serial.println("End draw Lyellow");  ///////////////////////////////////
}

void RightGreen2Buffer()
{
  u8g2.drawTriangle(45, 36, 35, 46, 55, 46);
  u8g2.drawBox(40, 46, 10, 15);
}

void RightRed2Buffer()
{
  u8g2.drawTriangle(45, 36, 35, 46, 55, 46);
  u8g2.drawBox(40, 46, 10, 15);
  u8g2.drawLine(30, 36, 60, 60);
  u8g2.drawLine(30, 37, 59, 60);
  u8g2.drawLine(31, 36, 60, 59);
}

void RightYellow2Buffer()
{
  //Serial.println("Start draw Ryellow"); /////////////////////////////////////
  u8g2.drawLine(45, 36, 55, 46);
  u8g2.drawLine(55, 46, 50, 46);
  u8g2.drawLine(50, 46, 50, 61);
  u8g2.drawLine(50, 61, 40, 61);
  u8g2.drawLine(40, 61, 40, 46);
  u8g2.drawLine(40, 46, 35, 46);
  u8g2.drawLine(35, 46, 45, 36);
  //Serial.println("End draw Ryellow"); ////////////////////////////////////
}

void LeftNum2Buffer0()
{
  u8g2.setCursor(68, 28);
  u8g2.print(RXPacket[1]);
  u8g2.setCursor(88, 28);
  u8g2.print(RXPacket[2]);  
}

void LeftNum2Buffer1()
{
  u8g2.setCursor(68, 28);
  u8g2.print(RXPacket[7]);
  u8g2.setCursor(88, 28);
  u8g2.print(RXPacket[8]);
}

void RightNum2Buffer0()
{
  u8g2.setCursor(68, 60);
  u8g2.print(RXPacket[4]);
  u8g2.setCursor(88, 60);
  u8g2.print(RXPacket[5]);  
}

void RightNum2Buffer1()
{
  u8g2.setCursor(68, 60);
  u8g2.print(RXPacket[10]);
  u8g2.setCursor(88, 60);
  u8g2.print(RXPacket[11]);  
}

void clearNumArea()
{
  u8g2.setDrawColor(0);
  u8g2.drawBox(0, 0, 110, 64);
  u8g2.sendBuffer();
  u8g2.setDrawColor(1);
}

void printPacket()
{
  //u8g2.clearBuffer();
  clearNumArea();
  //u8g2.sendBuffer();
  switch(dir)
  {
    case 0:
    {
      LeftNum2Buffer0();
      RightNum2Buffer0();
      if(RXPacket[0] == '0')
      {
        LeftGreen2Buffer();
      }
      if(RXPacket[0] == '1')
      {
        LeftYellow2Buffer();
      }
      if(RXPacket[0] == '2')
      {
        LeftRed2Buffer();
      }
      if(RXPacket[3] == '0')
      {
        RightGreen2Buffer();        
      }
      if(RXPacket[3] == '1')
      {
        RightYellow2Buffer();
      }
      if(RXPacket[3] == '2')
      {
        RightRed2Buffer();
      }
      break;
    }
    case 1:
    {
      LeftNum2Buffer1();
      RightNum2Buffer1();
      if(RXPacket[6] == '0')
      {
        LeftGreen2Buffer();
      }
      if(RXPacket[6] == '1')
      {
        LeftYellow2Buffer();
      }
      if(RXPacket[6] == '2')
      {
        LeftRed2Buffer();
      }
      if(RXPacket[9] == '0')
      {
        RightGreen2Buffer();        
      }
      if(RXPacket[9] == '1')
      {
        RightYellow2Buffer();
      }
      if(RXPacket[9] == '2')
      {
        RightRed2Buffer();
      }
      break;
    }
  }
  u8g2.sendBuffer();
  displayTransIcon(0);
  delay(50);
}


void displaySta()   //显示站台信息
{
  clearNumArea();
  u8g2.drawStr(0, 15, "Arriving at:");
  u8g2.drawStr(rollx, 30, sta[currentStation].name);
  u8g2.drawStr(rollx - 256, 30, sta[currentStation].name);
  u8g2.sendBuffer();
  rollx += 1;
  rollx %= 128;
  delay(20);
}

/**
  @brief 主任务代码，收发WiFi和显示
*/
void taskMainCode(void * parameter)
{
  for(;;)
  {
    switch(mode)
    {
      case 0:
      {
        displayAd();
        delay(20);
        break;
      }
      case 1:
      {
        if(WiFi.status() != WL_CONNECTED)
        {
          connectWiFi();
        }
        judgeDir();
        printPacket();
        break;
      }
      case 2:
      {
        displaySta();
        break;
      }
    }
    delay(10);
  }
}

void setup()
{
  //xTaskCreatePinnedToCore(taskBeidouCode, "taskBeidou", 10000, NULL, 1, &taskBeidou, 0);
  //xTaskCreatePinnedToCore(taskMainCode, "taskMain", 10000, NULL, 1, &taskMain, 1);
  // 串口初始化
  displayAd();
  Serial.begin(9600);
  Serial2.begin(9600);
  u8g2.begin();
  u8g2.enableUTF8Print();
  u8g2.setFont(u8g2_font_unifont_t_symbols);
}

void loop() 
{

}
