#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include "ESPAsyncUDP.h"
#include <Ticker.h>
#include <cstring>

#define MAX_CROSSROADS_NUM 3

/////////////////////////////显示相关定义/////////////////////////////////////////
#define SPI_SCK_0 digitalWrite(14, LOW)
#define SPI_SCK_1 digitalWrite(14, HIGH)
#define SPI_SDA_0 digitalWrite(13, LOW)
#define SPI_SDA_1 digitalWrite(13, HIGH)
#define SPI_RST_0 digitalWrite(12, LOW)
#define SPI_RST_1 digitalWrite(12, HIGH)
#define SPI_DC_0 digitalWrite(4, LOW)
#define SPI_DC_1 digitalWrite(4, HIGH)
#define SPI_CS_0 digitalWrite(5, LOW)
#define SPI_CS_1 digitalWrite(5, HIGH)
#define BL_0 digitalWrite(0, LOW)
#define BL_1 digitalWrite(0, HIGH)

// #define LCD_DIS_CHINA_ROT  180  //选择屏幕旋转参数
#define LCD_DIS_CHINA_ROT 0

#define LCD_COLUMN_NUMBER 128
#define LCD_LINE_NUMBER 64

#if (LCD_DIS_CHINA_ROT == 180)
#define LCD_COLUMN_OFFSET 4 // 旋转180度需要加4个偏移量
#else
#define LCD_COLUMN_OFFSET 0
#endif

#define LCD_PAGE_NUMBER (LCD_LINE_NUMBER / 8)
#define LCD_COMMAND_NUMBER 13

// 指令表
#define W25X_WriteEnable 0x06
#define W25X_WriteDisable 0x04
#define W25X_ReadStatusReg 0x05
#define W25X_WriteStatusReg 0x01
#define W25X_ReadData 0x03
#define W25X_FastReadData 0x0B
#define W25X_FastReadDual 0x3B
#define W25X_PageProgram 0x02
#define W25X_BlockErase 0xD8
#define W25X_SectorErase 0x20
#define W25X_ChipErase 0xC7
#define W25X_PowerDown 0xB9
#define W25X_ReleasePowerDown 0xAB
#define W25X_DeviceID 0xAB
#define W25X_ManufactDeviceID 0x90
#define W25X_JedecDeviceID 0x9F

#define TRUE 1
#define FALSE 0

struct // 显示字符参数传递结构体
{
  unsigned char CHAR_WIDE; // 英文字体宽度
  unsigned char CHAR_HIGH; // 英文字体高度
  // unsigned char  WORD_WIDE;           //汉字宽度
  // unsigned char  WORD_HIGH;           //汉字高度
  unsigned int CHAR_DATA_SIZE; // 英文一个字符总数据大小  字节
  // unsigned  int WORD_DATA_SIZE;     //汉字一个字符总数据大小  字节
  // type_of_dis TYPE_OF_DIS;              //字符颜色
  // unsigned long   BASE_WORD_ADD;           //汉字字库基地址
  // unsigned long   BASE_CHAR_ADD;           //英文字库基地址
} DIS_CHAR_MODE;


// 初始化命令表
const unsigned char LCD_init_cmd[LCD_COMMAND_NUMBER] =
    {
        0xe2, // 软复位    (NO Operation)
        0x2c, // 升压步骤1 (Power Control:VB)
        0x2e, // 升压步骤2 (Power Control:VB,VR)
        0x2f, // 升压步骤3 (Power Control:VB,VR,VF)
        0x24, // 粗调对比度，可设置范围0x20～0x27
        0x81, // 微调对比度
        0x22, // 微调对比度的值，可设置范围0x00～0x3f
        0xa2, // 1/9 偏压比（bias）
#if (LCD_DIS_CHINA_ROT == 180)
        0xA1, // 列扫描顺序：从左到右
        0xc0, // 行扫描顺序：反序
#else
        0xA0, // 列扫描顺序：从左到右
        0xc8, // 行扫描顺序：反序
#endif
        0xa6, // 正显
        0x40, // 起始行：第一行开始
        0xaf, // 开显示
};

/////////////////////////////////网络相关函数//////////////////////////////////////
ESP8266WiFiMulti WiFiMulti;
Ticker ticker;
AsyncUDP udp;
unsigned long localUdpPort = 4210;

void APList()
{
  //以下存入线路中所有路口的AP的SSID和密码
  WiFiMulti.addAP("TLECROSSROAD1", "12345678"); 
  WiFiMulti.addAP("TLECROSSROAD2", "87654321"); 
  WiFiMulti.addAP("TLECROSSROAD3", "13572468"); 
}

int dirList[MAX_CROSSROADS_NUM] = {0, 1, 1}; //预先存入所有路口的方向信息

int dir = 0;  //车辆当前所处方向

char RXPacket[13];

void onPacketCallBack(AsyncUDPPacket packet)  //收包后的回调函数；
{
  memcpy(RXPacket, packet.data(), sizeof(RXPacket));
  printPacket();
}

void judgeDir()
{
  if(!strcmp(WiFi.SSID().c_str(),"TLECROSSROAD1"))
  {
    dir = dirList[0];
  }
  if(!strcmp(WiFi.SSID().c_str(),"TLECROSSROAD2"))
  {
    dir = dirList[1];
  }
  if(!strcmp(WiFi.SSID().c_str(),"TLECROSSROAD3"))
  {
    dir = dirList[2];
  }
  //以此类推
}

void connectWiFi()
{
  LCD_full();
  while(WiFiMulti.run() != WL_CONNECTED)
  {
  }
  while(!udp.listen(localUdpPort))
  {
  }
  udp.onPacket(onPacketCallBack);
  judgeDir();
  LCD_clear();
}

void checkConn()
{
  if(WiFi.status() != WL_CONNECTED)
  {
    connectWiFi();
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////

void IO_init(void)
{
  pinMode(0, OUTPUT); // 设置数字脚为输出
  pinMode(4, OUTPUT); // 设置数字脚为输出
  pinMode(5, OUTPUT); // 设置数字脚为输出
  pinMode(12, OUTPUT); // 设置数字脚为输出
  pinMode(13, OUTPUT); // 设置数字脚为输出
  pinMode(14, OUTPUT); // 设置数字脚为输出
}

// SPI发送1字节数据
void SPI_SendByte(unsigned char byte)
{
  unsigned char counter;
  for (counter = 0; counter < 8; counter++)
  {
    SPI_SCK_0;
    if ((byte & 0x80) == 0)
    {
      SPI_SDA_0;
    }
    else
      SPI_SDA_1;
    byte = byte << 1;
    SPI_SCK_1;
  }

  SPI_SCK_0;
}

// 向液晶屏写一个指令（注意DC脚电平为低）
void LCD_send_cmd(unsigned char o_command)
{
  SPI_DC_0;
  SPI_CS_0;
  SPI_SendByte(o_command);
  SPI_CS_1;
}

// 向液晶屏写一个8位数据（注意DC脚电平为高）
void LCD_send_data(unsigned char o_data)
{
  SPI_DC_1;
  SPI_CS_0;
  SPI_SendByte(o_data);
  SPI_CS_1;
}

// 貌似是列地址高/低四位数据拆分写入函数（查资料貌似如此）
// 我也不懂这是个什么东西，总之就是一通操作，列用起来就很舒服了，好像是分LSB和MSB两个要分开
void Column_set(unsigned char column)
{
  column += LCD_COLUMN_OFFSET;
  LCD_send_cmd(0x10 | (column >> 4));   // 设置列地址高位
  LCD_send_cmd(0x00 | (column & 0x0f)); // 设置列地址低位
}

// 貌似是用来把页地址映射（查的资料）
// 还是不懂这是什么，一通操作，行用起来就舒服了，好像是实际上页地址排列不是从上到下的
void Page_set(unsigned char page)
{
  LCD_send_cmd(0xb0 + (page & 0X07));
}

// 清屏
void LCD_clear(void)
{
  unsigned char page, column;
  for (page = 0; page < LCD_PAGE_NUMBER; page++) // page loop
  {
    Page_set(page);
    Column_set(0);
    for (column = 0; column < LCD_COLUMN_NUMBER; column++) // column loop
    {
      LCD_send_data(0x00);
    }
  }
}

// 满屏
void LCD_full(void)
{
  unsigned char page, column;
  for (page = 0; page < LCD_PAGE_NUMBER; page++) // page loop
  {
    Page_set(page);
    Column_set(0);
    for (column = 0; column < LCD_COLUMN_NUMBER; column++) // column loop
    {
      LCD_send_data(0xff);
    }
  }
}

// LCD初始化，把命令表里的一堆挨个发出去
void LCD_init(void)
{
  unsigned char i;
  for (i = 0; i < LCD_COMMAND_NUMBER; i++)
  {
    LCD_send_cmd(LCD_init_cmd[i]);
  }
}

unsigned char LeftGreen[4][32] = {
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0x00},
{0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
/* (32 X 32 )*/
};

unsigned char LeftYellow[4][32] = {
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x08,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0xFE,0x00},
{0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
/* (32 X 32 )*/
};

unsigned char LeftRed[4][32] = {
{0x00,0x0E,0x1E,0x3E,0x7C,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x80,0xC0,0xE0,0xF1,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0x00},
{0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x07,0x0F,0x1F,0x3E,0x7C,0xF8,0xF0,0xE0}
/* (32 X 32 )*/
};

unsigned char RightGreen[4][32] = {
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00},
{0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
/* (32 X 32 )*/
};

unsigned char RightYellow[4][32] = {
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00,0x00},
{0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
/* (32 X 32 )*/
};

unsigned char RightRed[4][32] = {
{0x00,0x0E,0x1E,0x3E,0x7C,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x80,0xC0,0xE0,0xF1,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFC,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00},
{0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC1,0x81,0x01,0x01,0x01,0x01,0x01,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0x0F,0x1F,0x3E,0x7C,0xF8,0xF0,0xE0}
/* (32 X 32 )*/
};

unsigned char Number[10][4][16] = {
  
0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xF0,0xFE,0x0F,0x01,0x00,0x00,0x00,0x00,0x01,0x07,0xFE,0xF0,0x00,0x00,
0x00,0x00,0x3F,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xFF,0x3F,0x00,0x00,
0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x08,0x08,0x08,0x06,0x03,0x01,0x00,0x00,0x00,/*"0",0*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x01,0x01,0x01,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x08,0x08,0x08,0x0C,0x0F,0x0F,0x0C,0x08,0x08,0x08,0x00,0x00,0x00,/*"1",1*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x00,0x80,0x40,0x40,0x40,0x40,0x40,0xC0,0x80,0x80,0x00,0x00,0x00,
0x00,0x00,0x1E,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC1,0xFF,0x3E,0x00,0x00,
0x00,0x00,0x00,0x00,0x80,0x40,0x30,0x18,0x0C,0x06,0x03,0x01,0x00,0xC0,0x00,0x00,
0x00,0x00,0x0E,0x0D,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0E,0x03,0x00,0x00,/*"2",2*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x80,0x80,0x40,0x40,0x40,0x40,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x80,0xC1,0x7F,0x3E,0x00,0x00,0x00,
0x00,0x00,0xC0,0xC0,0x00,0x00,0x01,0x01,0x01,0x03,0x02,0x06,0xFC,0xF0,0x00,0x00,
0x00,0x00,0x03,0x07,0x04,0x08,0x08,0x08,0x08,0x08,0x04,0x06,0x03,0x00,0x00,0x00,/*"3",3*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x80,0x60,0x10,0x0C,0x03,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
0x00,0x30,0x2C,0x26,0x21,0x20,0x20,0x20,0x20,0xFF,0xFF,0x20,0x20,0x20,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x0F,0x0F,0x08,0x08,0x08,0x00,0x00,/*"4",4*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,
0x00,0x00,0x00,0xFF,0x00,0x80,0x40,0x40,0x40,0x40,0xC0,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0xC0,0xC3,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFC,0x00,0x00,
0x00,0x00,0x03,0x04,0x04,0x08,0x08,0x08,0x08,0x08,0x04,0x07,0x03,0x00,0x00,0x00,/*"5",5*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x40,0x40,0x40,0x40,0x80,0x80,0x00,0x00,0x00,
0x00,0x00,0xE0,0xFC,0x07,0x81,0xC0,0x40,0x40,0x40,0xC0,0x83,0x03,0x00,0x00,0x00,
0x00,0x00,0x7F,0xFF,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFC,0x00,0x00,
0x00,0x00,0x00,0x01,0x07,0x06,0x0C,0x08,0x08,0x08,0x0C,0x06,0x03,0x00,0x00,0x00,/*"6",6*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,
0x00,0x00,0x0E,0x03,0x00,0x00,0x00,0x00,0x00,0xE0,0x18,0x06,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"7",7*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x00,0x80,0xC0,0x40,0x40,0x40,0x40,0xC0,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x3E,0x7F,0xF1,0xC0,0xC0,0x80,0x00,0x00,0x80,0x41,0x7F,0x1E,0x00,0x00,
0x00,0xF0,0xFC,0x0E,0x02,0x01,0x01,0x01,0x03,0x07,0x0E,0x1E,0xFC,0xF0,0x00,0x00,
0x00,0x01,0x03,0x06,0x04,0x08,0x08,0x08,0x08,0x08,0x04,0x06,0x03,0x01,0x00,0x00,/*"8",8*/
/* (16 X 32 , 宋体 )*/

0x00,0x00,0x00,0x80,0x80,0x40,0x40,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,
0x00,0xFC,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFE,0xF8,0x00,0x00,
0x00,0x01,0x03,0x07,0x0C,0x08,0x08,0x08,0x08,0x04,0x06,0xE1,0x7F,0x1F,0x00,0x00,
0x00,0x00,0x07,0x07,0x08,0x08,0x08,0x08,0x0C,0x06,0x03,0x01,0x00,0x00,0x00,0x00/*"9",9*/
/* (16 X 32 , 宋体 )*/

};
/////数字的字库改成一排，所有数字放在一起成二维数组，改变发包不用ASCII，直接用数据包内容选

void displayLeftGreen()
{
  unsigned char page, column;
  for(page = 0; page < 4; page++)
  {
    Page_set(page);
    Column_set(30); /////显示开始的列数，下同
    for(column = 0; column < 32; column++)
    {
      LCD_send_data(LeftGreen[page][column]);
    }
  }
}

void displayLeftYellow()
{
  unsigned char page, column;
  for(page = 0; page < 4; page++)
  {
    Page_set(page);
    Column_set(30);
    for(column = 0; column < 32; column++)
    {
      LCD_send_data(LeftYellow[page][column]);
    }
  }
}

void displayLeftRed()
{
  unsigned char page, column;
  for(page = 0; page < 4; page++)
  {
    Page_set(page);
    Column_set(30);
    for(column = 0; column < 32; column++)
    {
      LCD_send_data(LeftRed[page][column]);
    }
  }
}

void displayRightGreen()
{
  unsigned char page, column;
  for(page = 4; page < 8; page++)
  {
    Page_set(page);
    Column_set(30);
    for(column = 0; column < 32; column++)
    {
      LCD_send_data(RightGreen[page - 4][column]);
    }
  }
}

void displayRightYellow()
{
  unsigned char page, column;
  for(page = 4; page < 8; page++)
  {
    Page_set(page);
    Column_set(30);
    for(column = 0; column < 32; column++)
    {
      LCD_send_data(RightYellow[page - 4][column]);
    }
  }
}

void displayRightRed()
{
  unsigned char page, column;
  for(page = 4; page < 8; page++)
  {
    Page_set(page);
    Column_set(30);
    for(column = 0; column < 32; column++)
    {
      LCD_send_data(RightRed[page - 4][column]);
    }
  }
}

void displayLeftNum()
{
  switch (dir)
  {
    case 0:
    {
      unsigned char page1, column1;
      for(page1 = 0; page1 < 4; page1++)
      {
        Page_set(page1);
        Column_set(64);
        for(column1 = 0; column1 < 16; column1++)
        {
          LCD_send_data(Number[RXPacket[1] - 48][page1][column1]);
        }
      }
      unsigned char page2, column2;
      for(page2 = 0; page2 < 4; page2++)
      {
        Page_set(page2);
        Column_set(80);
        for(column2 = 0; column2 < 16; column2++)
        {
          LCD_send_data(Number[RXPacket[2] - 48][page2][column2]);
        }
      }
      break;
    }
    case 1:
    {
      unsigned char page1, column1;
      for(page1 = 0; page1 < 4; page1++)
      {
        Page_set(page1);
        Column_set(64);
        for(column1 = 0; column1 < 16; column1++)
        {
          LCD_send_data(Number[RXPacket[7] - 48][page1][column1]);
        }
      }
      unsigned char page2, column2;
      for(page2 = 0; page2 < 4; page2++)
      {
        Page_set(page2);
        Column_set(80);
        for(column2 = 0; column2 < 16; column2++)
        {
          LCD_send_data(Number[RXPacket[8] - 48][page2][column2]);
        }
      }
      break;
    }
  }
}


void displayRightNum()
{
  switch (dir)
  {
    case 0:
    {
      unsigned char page1, column1;
      for(page1 = 4; page1 < 8; page1++)
      {
        Page_set(page1);
        Column_set(64);
        for(column1 = 0; column1 < 16; column1++)
        {
          LCD_send_data(Number[RXPacket[4] - 48][page1][column1]);
        }
      }
      unsigned char page2, column2;
      for(page2 = 4; page2 < 8; page2++)
      {
        Page_set(page2);
        Column_set(80);
        for(column2 = 0; column2 < 16; column2++)
        {
          LCD_send_data(Number[RXPacket[5] - 48][page2][column2]);
        }
      }
      break;
    }
    case 1:
    {
      unsigned char page1, column1;
      for(page1 = 4; page1 < 8; page1++)
      {
        Page_set(page1);
        Column_set(64);
        for(column1 = 0; column1 < 16; column1++)
        {
          LCD_send_data(Number[RXPacket[10] - 48][page1][column1]);
        }
      }
      unsigned char page2, column2;
      for(page2 = 4; page2 < 8; page2++)
      {
        Page_set(page2);
        Column_set(80);
        for(column2 = 0; column2 < 16; column2++)
        {
          LCD_send_data(Number[RXPacket[11] - 48][page2][column2]);
        }
      }
      break;
    }
  }
}


void printPacket()
{
  LCD_clear();
  switch(dir)
  {
    case 0:
    {
      displayRightNum();
      displayLeftNum();
      //displayRightNum();
      if(RXPacket[0] == '0')
      {
        displayLeftGreen();
      }
      if(RXPacket[0] == '1')
      {
        displayLeftYellow();
      }
      if(RXPacket[0] == '2')
      {
        displayLeftRed();
      }
      if(RXPacket[3] == '0')
      {
        displayRightGreen();        
      }
      if(RXPacket[3] == '1')
      {
        displayRightYellow();
      }
      if(RXPacket[3] == '2')
      {
        displayRightRed();
      }
      break;
    }
    case 1:
    {
      displayLeftNum();
      displayRightNum();
      if(RXPacket[6] == '0')
      {
        displayLeftGreen();
      }
      if(RXPacket[6] == '1')
      {
        displayLeftYellow();
      }
      if(RXPacket[6] == '2')
      {
        displayLeftRed();
      }
      if(RXPacket[9] == '0')
      {
        displayRightGreen();        
      }
      if(RXPacket[9] == '1')
      {
        displayRightYellow();
      }
      if(RXPacket[9] == '2')
      {
        displayRightRed();
      }
      break;
    }
  }
}

void setup()
{
  IO_init();
  SPI_SCK_0;
  SPI_RST_0;
  BL_1;
  delay(30);
  SPI_RST_1;
  delay(30);
  LCD_init();
  LCD_full();
  delay(500);
  ticker.attach(5, checkConn);
  LCD_clear();
  APList();
  connectWiFi();
}

void loop()
{

}